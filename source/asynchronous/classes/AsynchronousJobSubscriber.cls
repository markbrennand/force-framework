/**
 * @description
 * <p/>
 * Class providing the Trigger logic for the AsynchronousJob__c object.
 * <p/>
 * A Trigger API Subscriber is used to consume the Event published by the Trigger API.
 * <p/>
 * The Subscriber implementation class is private to prevent its re-use.
 * <p/>
 * Copyright (c) 2025 Mark Brennand, released under <a href=../../LICENSE target="_blank">MIT License</a>.
 *
 * @author Mark Brennand
 */
public with sharing class AsynchronousJobSubscriber {

    /**
     * @description
     * <p/>
     * Prevent construction outside class.
     */
    @SuppressWarnings('PMD.EmptyStatementBlock')
    private AsynchronousJobSubscriber() {}

    /**
     * @description
     * <p/>
     * Constructs instance of trigger subscriber.
     * <p/>
     * The class is private to prevent re-use outside this class.
     */
    private with sharing class Implementation implements TriggerV1.Subscriber {

        /**
         * @description
         * <p/>
         * Processes the event generated by the trigger API when DML is performed.
         *
         * @param event The trigger API event.
         */
        public void onEvent(final TriggerV1.Event event) {
            if (event.isBefore()) {
                handleBefore(event);
            } else {
                handleAfter(event);
            }
        }

        private void handleBefore(final TriggerV1.Event event) {
            ArrayV1.over(event.getRecords()).forEach(new PreProcessor());
        }

        private void handleAfter(final TriggerV1.Event event) {
            AsynchronousDAO.impl.removeObjects(
                    (List<AsynchronousJob__c>)
                            ArrayV1.over(event.getRecords()).sharing(event).reduce(
                                    new DeletionsBuilder(),
                                    new List<AsynchronousJob__c>()
                            )
            );

            if (!ArrayV1.over(event.getRecords()).every(new IsSchedulerJob())) {
                AsynchronousScheduler.queue(new Set<String>());
            }
        }
    }

    /**
     * @description
     * <p/>
     * Factory to create the trigger subscriber class.
     */
    public class Factory implements TypesV1.Factory {
        private final Implementation subscriber = new Implementation();

        /**
         * @description
         * Constructs a new instance of the trigger subscriber.
         *
         * @return The trigger subscriber.
         */
        public Object newInstance() {
            return subscriber;
        }
    }

    private with sharing class PreProcessor extends ArrayV1.Callback {
        public override OptionalV1 function(final Object element, final OptionalV1 currentValue, final Integer index) {
            final AsynchronousJob__c asyncObject = (AsynchronousJob__c) element;

            try {
                final Object runnable = TypesV1.newInstance(TypesV1.load(asyncObject.Runnable__c));
                if (!(runnable instanceof AsynchronousV1.RunnableJob)) {
                    asyncObject.addError(AsynchronousJob__c.Runnable__c, 'Class ' + asyncObject.Runnable__c + ' does not implement AsynchronousV1.RunnableJob');

                } else if (asyncObject.Status__c == AsynchronousV1.Status.PENDING.name()) {
                    asyncObject.Status__c = AsynchronousV1.Status.QUEUED.name();
                    asyncObject.ScheduledRunTime__c = CommonHelper.now();
                    asyncObject.RetryNumber__c = 0;
                }

            } catch (Exception e) {
                asyncObject.addError(e.getMessage());
            }

            return OptionalV1.empty();
        }
    }

    private with sharing class DeletionsBuilder extends ArrayV1.Callback {
        public override OptionalV1 function(final Object element, final OptionalV1 currentValue, final Integer index) {
            final AsynchronousJob__c asyncObject = (AsynchronousJob__c) element;
            final TriggerV1.Event event = (TriggerV1.Event) shared().get();

            if (asyncObject.Status__c == AsynchronousV1.Status.CANCELLED.name()
                    && event.hasOldValue(asyncObject)
                    && asyncObject.Status__c != ((AsynchronousJob__c) event.getOldValue(asyncObject).get()).Status__c
            ) {
                final AsynchronousV1.Job asyncJob = AsynchronousJob.fromSObject(asyncObject);
                if (!asyncJob.getRunnable().onCancellation(asyncJob)) {

                    // We cannot add the job as it is read only in an after update call.
                    ((List<AsynchronousJob__c>) currentValue.get()).add(new AsynchronousJob__c(Id = asyncObject.Id));
                }
            }

            return currentValue;
        }
    }

    private with sharing class IsSchedulerJob extends ArrayV1.Callback {
        public override OptionalV1 function(final Object element, final OptionalV1 currentValue, final Integer index) {
            final AsynchronousJob__c asyncObject = (AsynchronousJob__c) element;
            return OptionalV1.of(AsynchronousJob.fromSObject(asyncObject).getRunnable() instanceof AsynchronousScheduler);
        }
    }
}