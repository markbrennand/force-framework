/**
 * @description
 * <p>
 * Class providing the trigger logic for the Binding__c object.
 * <p>
 * See <a href=../../triggers/README.md target="_blank">README</a> for full details of the Triggers API.
 * <p>
 * Copyright (c) 2025 Mark Brennand, released under <a href=../../LICENSE target="_blank">MIT License</a>.
 *
 * @author Mark Brennand
 */
public with sharing class DependencySubscriber {

    /**
     * @description
     * <p>
     * Prevent construction outside class.
     */
    @SuppressWarnings('PMD.EmptyStatementBlock')
    private DependencySubscriber() {}

    /**
     * @description
     * <p>
     * Class implementing the trigger logic.
     * <p>
     * It is private to prevent its re-use outside this class.
     */
    private with sharing class Implementation implements TriggerV1.Subscriber {

        /**
         * @description
         * <p>
         * Processes the event generated by the trigger API when DML is performed.
         *
         * @param event The trigger API event.
         */
        public void onEvent(final TriggerV1.Event event) {
            if (event.isAfter()) {
                handle(event);
            }
        }

        /**
         * @description
         * <p>
         * Check Binding__c records are valid.
         *
         * @param event The event representing the trigger invocation.
         */
        private void handle(final TriggerV1.Event event) {
            DependencyAPI.checkForDuplicates();
            DependencyAPI.validate(event.getRecords());
            DependencyV1.reload();
        }
    }

    /**
     * @description
     * <p>
     * Creates the default Binding trigger implementation.
     * <p>
     * The constructor for the implementation is private. This prevents the Dependency framework constructing it.
     * We use the factory to defer the construction by injection to this class, which is able to construct it.
     */
    public with sharing class Factory implements TypesV1.Factory {
        private final Implementation subscriber = new Implementation();

        /**
         * @description
         * <p>
         * Returns the API implementation.
         *
         * @return The API implementation.
         */
        public Object newInstance() {
            return subscriber;
        }
    }
}